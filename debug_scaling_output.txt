=== Debugging Ellipsoid-Hyperplane Intersection Scaling ===
Input ellipsoid Q: [[1. 0.]
 [0. 1.]]
Input ellipsoid q: [0. 0.]
Hyperplane normal: [[1 1]]
Hyperplane offset: [[0]]

Testing points on unit circle boundary:
Point [1. 0.]: (x-q)^T Q^(-1) (x-q) = 1.000000
Point [0. 1.]: (x-q)^T Q^(-1) (x-q) = 1.000000
Point [-1.  0.]: (x-q)^T Q^(-1) (x-q) = 1.000000
Point [ 0. -1.]: (x-q)^T Q^(-1) (x-q) = 1.000000
Point [0.70710678 0.70710678]: (x-q)^T Q^(-1) (x-q) = 1.000000
Point [-0.70710678 -0.70710678]: (x-q)^T Q^(-1) (x-q) = 1.000000

Testing points on line x + y = 0:
Point (-1.0,  1.0): on_line=True, (x-q)^T Q^(-1) (x-q) = 2.000000, in_circle=False
Point (-0.5,  0.5): on_line=True, (x-q)^T Q^(-1) (x-q) = 0.500000, in_circle=True
Point ( 0.0, -0.0): on_line=True, (x-q)^T Q^(-1) (x-q) = 0.000000, in_circle=True
Point ( 0.5, -0.5): on_line=True, (x-q)^T Q^(-1) (x-q) = 0.500000, in_circle=True
Point ( 1.0, -1.0): on_line=True, (x-q)^T Q^(-1) (x-q) = 2.000000, in_circle=False

Boundary parameter t = ▒0.707107
Boundary point (-0.707107, 0.707107): (x-q)^T Q^(-1) (x-q) = 1.000000
Boundary point (0.707107, -0.707107): (x-q)^T Q^(-1) (x-q) = 1.000000

Expected result Q matrix: [[ 0.25 -0.25]
 [-0.25  0.25]]
Expected eigenvalues: [0.5 0. ]

Testing expected Q matrix with boundary points:
Point (-0.707107, 0.707107): x^T Q^+ x = 2.000000
Point (0.707107, -0.707107): x^T Q^+ x = 2.000000

=== Algorithm Step Analysis ===
In our test case, the scaling factor 'a' = 1
The issue might be in how this scaling factor is applied to construct W_s
Or in the coordinate transformation itself

The matrix W_s construction might be where the scaling issue occurs
Need to verify if the reference [1] uses a different convention
